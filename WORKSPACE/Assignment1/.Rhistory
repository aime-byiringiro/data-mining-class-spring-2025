setwd("~/OneDrive - Texas Christian University/All 4-year Semesters/Spring 2025/Data Mining and Visualization/WORKSPACE/Simple Linear Regression")
setwd("~/OneDrive - Texas Christian University/All 4-year Semesters/Spring 2025/Data Mining and Visualization/WORKSPACE")
setwd("~/OneDrive - Texas Christian University/All 4-year Semesters/Spring 2025/Data Mining and Visualization/WORKSPACE/Assignment1")
# Data Preprocessing Tools
# Importing the dataset
dataset = read.csv('Customer_Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
median(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('India', 'Sri lanka', 'China'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 2/3)
# split = sample.split(dataset$Age, SplitRatio = 0.8)
# We always want to use a dependent variable because of the .....
#.8 is how many rows do I want
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
min_max_norm <- function(x) { return((x - min(x)) / (max(x) - min(x)))}
training_set[, 2:3] <- apply(training_set[, 2:3], 2, min_max_norm)
test_set[, 2:3] <- scale(test_set[, 2:3],
center = apply(training_set[, 2:3], 2, min),
scale = apply(training_set[, 2:3], 2, function(x) max(x) - min(x)))
# simple to hard and more details
#view
# print
# str
# Data Preprocessing Tools
# Importing the dataset
dataset = read.csv('Customer_Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
median(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('India', 'Sri lanka', 'China'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 2/3)
# split = sample.split(dataset$Age, SplitRatio = 0.8)
# We always want to use a dependent variable because of the .....
#.8 is how many rows do I want
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
min_max_norm <- function(x) { return((x - min(x)) / (max(x) - min(x)))}
training_set[, 2:3] <- apply(training_set[, 2:3], 2, min_max_norm)
test_set[, 2:3] <- scale(test_set[, 2:3],
center = apply(training_set[, 2:3], 2, min),
scale = apply(training_set[, 2:3], 2, function(x) max(x) - min(x)))
# simple to hard and more details
#view
# print
# str
View(dataset)
View(test_set)
View(training_set)
View(test_set)
View(training_set)
View(test_set)
View(training_set)
View(test_set)
# Data Preprocessing Tools
# Importing the dataset
dataset = read.csv('Customer_Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
median(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('India', 'Sri lanka', 'China'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 2/3)
# split = sample.split(dataset$Age, SplitRatio = 0.8)
# We always want to use a dependent variable because of the .....
#.8 is how many rows do I want
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# Define min-max normalization function
min_max_norm <- function(x, min_val, max_val) {
return((x - min_val) / (max_val - min_val))
}
# Compute min and max values for each feature in the training set
min_vals <- apply(training_set[, 2:3], 2, min)
max_vals <- apply(training_set[, 2:3], 2, max)
# Normalize training set using its own min-max values
training_set[, 2:3] <- as.data.frame(mapply(min_max_norm,
training_set[, 2:3],
min_vals,
max_vals))
# Normalize test set using training set's min-max values
test_set[, 2:3] <- as.data.frame(mapply(min_max_norm,
test_set[, 2:3],
min_vals,
max_vals))
# simple to hard and more details
#view
# print
# str
View(test_set)
View(training_set)
View(test_set)
View(test_set)
#Author Aime Byiringiro
#We are  trying to predict if people in specific countries at certain age
#  will or will not purchase
# This is a classification problem since the dependent variable is categorical.
# Importing data from Customer_Data.csv in the working directory
dataset = read.csv('Customer_Data.csv')
# replacing misssing Age with median of all ages
dataset$Age = ifelse(is.na(dataset$Age),
median(dataset$Age, na.rm = TRUE),
dataset$Age)
#replacing missing salaires with mean of salaries
dataset$Salary = ifelse(is.na(dataset$Salary),
mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
# Encoding Country column data
#India = 1, Sri lanka = 2, China = 3
dataset$Country = factor(dataset$Country,
levels = c('India', 'Sri lanka', 'China'),
labels = c(1, 2, 3))
# Encoding Purchased column data
#No = 0, Yes. =1
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# 1/3 of the data will be used for test and ther rest for training
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# Define min-max normalization function
min_max_norm <- function(x, min_val, max_val) {
return((x - min_val) / (max_val - min_val))
}
# Compute min and max values for each feature in the training set
min_vals <- apply(training_set[, 2:3], 2, min)
max_vals <- apply(training_set[, 2:3], 2, max)
# Normalize training set using its own min-max values
training_set[, 2:3] <- as.data.frame(mapply(min_max_norm,
training_set[, 2:3],
min_vals,
max_vals))
# Normalize test set using training set's min-max values
test_set[, 2:3] <- as.data.frame(mapply(min_max_norm,
test_set[, 2:3],
min_vals,
max_vals))
# str
View(training_set)
View(test_set)
View(dataset)
View(training_set)
View(test_set)
