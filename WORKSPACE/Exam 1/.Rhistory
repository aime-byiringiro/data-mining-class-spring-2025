clear
setwd("~/Desktop/Data Mining and Visualization/WORKSPACE/Assignment1")
setwd("~/Desktop/Data Mining and Visualization/WORKSPACE/Assignment2")
dataset = read.csv('Dealership_Data.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Sell.Price, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training set
# we do not need to include the independent variable in the formula because it is already in the dataset
# but we need to include the dependent variable because it is not in the dataset
regressor = lm(formula = Sell.Price ~ List.Price, data = training_set)
# Predicting the Test set results
# newdata is the test set
# this new data is not in the training set
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$List.Price, y = training_set$Sell.Price),
colour = 'red')+
geom_line(aes(x = training_set$List.Price, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Sell Price vs List Price (Training set)') +
xlab('List Price') +
ylab('Sell Price')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$List.Price, y = test_set$Sell.Price),
colour = 'red') +
geom_line(aes(x = training_set$List.Price, y = predict(regressor, newdata = training_set)),
colour = 'black') +
ggtitle('Sell Price vs List Price (Test set)') +
xlab('List Price') +
ylab('Sell Price')
# regressor is a linear model
# new data is the test set
print(predict(regressor, newdata = data.frame('List Price' = 20)))
# slope and intercept
print(regressor$coefficients)
dataset = read.csv('Dealership_Data.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Sell.Price, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training set
# we do not need to include the independent variable in the formula because it is already in the dataset
# but we need to include the dependent variable because it is not in the dataset
regressor = lm(formula = Sell.Price ~ List.Price, data = training_set)
# Predicting the Test set results
# newdata is the test set
# this new data is not in the training set
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$List.Price, y = training_set$Sell.Price),
colour = 'red')+
geom_line(aes(x = training_set$List.Price, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Sell Price vs List Price (Training set)') +
xlab('List Price') +
ylab('Sell Price')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$List.Price, y = test_set$Sell.Price),
colour = 'red') +
geom_line(aes(x = training_set$List.Price, y = predict(regressor, newdata = training_set)),
colour = 'black') +
ggtitle('Sell Price vs List Price (Test set)') +
xlab('List Price') +
ylab('Sell Price')
# regressor is a linear model
# new data is the test set
print(predict(regressor, newdata = data.frame('List Price' = 20)))
# slope and intercept
print(regressor$coefficients)
setwd("~/Desktop/Data Mining and Visualization/WORKSPACE/Assignment3")
# Step 1: Full Model
regressor_opt = lm(Y ~ X1 + X2 + X3 + X4 + X5 + X6, data = training_set)
# Multiple Linear Regression in R for COSC 40023 Assignment 3
# Texas Christian University - Spring 2025
# Due: February 19th
# Importing the dataset
dataset = read.csv('Crime_Data.csv')
# Viewing the first few rows of the dataset
head(dataset)
# Splitting the dataset into the Training set and Test set
# 10% Test set, with seed set to 123
library(caTools)
set.seed(123)
split = sample.split(dataset$Y, SplitRatio = 0.9)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training set
# Y ~ . means Y is the dependent variable and all other variables are independent
regressor = lm(Y ~ ., data = training_set)
summary(regressor)
# Building the optimal model using Backward Elimination
# Significance level = 5%
# Step 1: Full Model
regressor_opt = lm(Y ~ X1 + X2 + X3 + X4 + X5 + X6, data = training_set)
# Step 1: Full Model
regressor_opt = lm(Y ~ X1 + X2 + X3 + X4 + X5 + X6, data = training_set)
summary(regressor_opt)
# Step 1: Full Model
regressor_opt = lm(Y ~ X1 + X2 + X3 + X4 + X5 + X6, data = training_set)
summary(regressor_opt)
regressor_opt = lm(Y ~ X1 + X2 + X4 + X5 + X6, data = training_set)
summary(regressor_opt)
regressor_opt = lm(Y ~ X1 + X2 + X4 + X5, data = training_set)
summary(regressor_opt)
regressor_opt = lm(Y ~ X1 + X2 + X4, data = training_set)
summary(regressor_opt)
setwd("~/Desktop/Data Mining and Visualization/WORKSPACE/Exam 1")
dataset = read.csv('Insurance_Data.csv')
dataset$gender = factor(dataset$gender,
levels = c('male', 'female'),
labels = c(0, 1))
dataset = read.csv('Insurance_Data.csv')
dataset$gender = factor(dataset$gender,
levels = c('male', 'female'),
labels = c(0, 1))
dataset = read.csv('Insurance_Data.csv')
dataset = read.csv('Insurance_Data.csv')
dataset$sex = factor(dataset$sex,
levels = c('male', 'female'),
labels = c(0, 1))
# STEP 1
dataset = read.csv('Insurance_Data.csv')
dataset$sex = factor(dataset$sex,
levels = c('male', 'female'),
labels = c(0, 1))
dataset$smoker = factor(dataset$smoker,
levels = c('no', 'yes'),
labels = c(0, 1))
dataset$region = factor(dataset$region,
levels = c('northeast', 'southeast', 'southwest', 'northwest'),
labels = c(1, 2, 3, 4))
regressor = lm(charges ~ ., data = dataset)
summary(regressor)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Age, y = dataset$Charges),
colour = 'red') +
geom_lines(aes(x = dataset$Day, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Ages') +
ylab('Charges')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Age, y = dataset$Charges),
colour = 'red') +
geom_lines(aes(x = dataset$Age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Ages') +
ylab('Charges')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Age, y = dataset$Charges),
colour = 'red') +
geom_lines(aes(x = dataset$Age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Ages') +
ylab('Charges')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Age, y = dataset$Charges),
colour = 'red') +
geom_line(aes(x = dataset$Age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Ages') +
ylab('Charges')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Age, y = dataset$Charges),
colour = 'red') +
geom_point(aes(x = dataset$Age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Ages') +
ylab('Charges')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Age, y = dataset$Charges),
colour = 'red') +
geom_point(aes(x = dataset$Age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Ages') +
ylab('Charges')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$age, y = dataset$Charges),
colour = 'red') +
geom_line(aes(x = dataset$age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Age') +
ylab('Charge')
rlang::last_trace()
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$age, y = dataset$Charges),
colour = 'red') +
geom_line(aes(x = dataset$age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Age') +
ylab('Charge')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$age, y = dataset$Charges),
colour = 'red') +
geom_line(aes(x = dataset$age, y = predict(regressor, dataset)),
colour = 'blue') +
ggtitle('Chargs vs Ages') +
xlab('Age') +
ylab('Charge')
plot(dataset$age, dataset$charges, main = 'Age vs Charges', xlab = 'age', ylab = 'Charges')
plot(dataset$age, dataset$charges, xlab = "Age", ylab = "Charges", main = "Age vs Charges", col = "red")
# add trend line
abline(regressor, col = "blue")
# and use blue dots to show predicted charges
points(dataset$age, regressor$fitted.values, col = "blue", pch = 19)
points(dataset$age, regressor$fitted.values, col = "blue", pch = 19)
plot(dataset$age, dataset$charges, col = 'red')
points(dataset$age, predict(regressor, newdata = dataset), col = 'blue')
plot(dataset$age, dataset$charges, col = 'red')
points(dataset$age, predict(regressor, newdata = dataset), col = 'blue')
plot(dataset$age, dataset$charges, col = 'red')
points(dataset$age, predict(regressor, newdata = dataset), col = 'blue')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$age, y = dataset$charges),
colour = 'red') +
geom_line(aes(x = dataset$age, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Age vs Charges') +
xlab('Age') +
ylab('Charges')
dataset$age_squared = dataset$age^2 # add a new column for bmi squared
# make sure there no repetive clumsy for age degree1
dataset = dataset[, -which(names(dataset) == "age")] # remove age column to avoid repetition
dataset$bmi_high = ifelse(dataset$bmi >= 30, 1, 0) # add new column for BMI. IBM > = 30 is high BMI and < 30 is low BMI
dataset$smoker_bmi = ifelse(dataset$bmi >= 30 & dataset$smoker == 1, 1, 0) # add new column for smomker and BMI. if bmi is hight and smoker do 1, otherwise 0
new_regressor = lm(formula = charges ~ ., data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$age, y = dataset$charges),
colour = 'red') +
geom_line(aes(x = dataset$age, y = predict(new_regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Age vs Charges') +
xlab('Age') +
ylab('Charges')
regressor_opt = lm(charges ~ age + sex + bmi + children + smoker + region + age_squared + bmi_high + smoker_bmi, data = dataset)
regressor_opt = lm(charges ~ sex + bmi + children + smoker + region + age_squared + bmi_high + smoker_bmi, data = dataset)
regressor_opt = lm(charges ~ sex + bmi + children + smoker + region + age_squared + bmi_high + smoker_bmi, data = dataset)
summary(regressor_opt)
regressor_opt = lm(charges ~ bmi + children + smoker + region + age_squared + bmi_high + smoker_bmi, data = dataset)
summary(regressor_opt)
regressor_opt = lm(charges ~ bmi + children + smoker + region + age_squared + bmi_high + smoker_bmi, data = dataset)
summary(regressor_opt)
regressor_opt = lm(charges ~ bmi + smoker + region + age_squared + bmi_high + smoker_bmi, data = dataset)
summary(regressor_opt)
regressor_opt = lm(charges ~ bmi + smoker + age_squared + bmi_high + smoker_bmi, data = dataset)
summary(regressor_opt)
regressor_opt = lm(charges ~ bmi + smoker + age_squared+ smoker_bmi, data = dataset)
summary(regressor_opt)
regressor_opt = lm(charges ~ smoker + age_squared+ smoker_bmi, data = dataset)
summary(regressor_opt)
